package com.zeapo.pwdstore.autotype

import android.bluetooth.BluetoothAdapter
import android.bluetooth.BluetoothDevice
import android.bluetooth.BluetoothHidDevice
import android.bluetooth.BluetoothHidDeviceAppSdpSettings
import android.bluetooth.BluetoothProfile
import android.bluetooth.BluetoothProfile.ServiceListener
import android.content.Context
import android.os.Build
import android.os.SystemClock
import androidx.annotation.RequiresApi
import org.intellij.lang.annotations.Language
import java.io.ByteArrayOutputStream
import java.io.FileNotFoundException
import java.io.IOException
import java.util.Arrays
import java.util.HashSet
import java.util.NoSuchElementException


/**
 * Authorizer
 *
 *  Copyright 2016 by Tjado MÃ¤cke <tjado@maecke.de>
 *  Licensed under GNU General Public License 3.0.
 *
 * @license GPL-3.0 <https://opensource.org/licenses/GPL-3.0>
 */


@RequiresApi(Build.VERSION_CODES.P)
class BluetoothKeyboard(ctx: Context)  {

    private var kbdKeyInterpreter: UsbHidKbd
    private val context: Context
    private val btAdapter: BluetoothAdapter?
    private var btDevice: BluetoothDevice? = null
    private var btHidDevice: BluetoothHidDevice? = null
    private var btOutputString: String? = null
    private var btOutputBytes: ByteArray? = null
    private val hidDescriptor = byteArrayOf( // Generated by HID Descriptor Tool
        // Generic HID descriptor
        // ... removed due to issues with Windows 10
        // Report descriptor - Keyboard
        0x05.toByte(), 0x01.toByte(),  // USAGE_PAGE (Generic Desktop)
        0x09.toByte(), 0x06.toByte(),  // USAGE (Keyboard)
        0xa1.toByte(), 0x01.toByte(),  // COLLECTION (Application)
        0x85.toByte(), HID_RID_KEYBOARD,  //   REPORT_ID (1)
        0x05.toByte(), 0x07.toByte(),  //   USAGE_PAGE (Keyboard)
        0x19.toByte(), 0xe0.toByte(),  //   USAGE_MINIMUM (Keyboard LeftControl)
        0x29.toByte(), 0xe7.toByte(),  //   USAGE_MAXIMUM (Keyboard Right GUI)
        0x15.toByte(), 0x00.toByte(),  //   LOGICAL_MINIMUM (0)
        0x25.toByte(), 0x01.toByte(),  //   LOGICAL_MAXIMUM (1)
        0x75.toByte(), 0x01.toByte(),  //   REPORT_SIZE (1)
        0x95.toByte(), 0x08.toByte(),  //   REPORT_COUNT (8)
        0x81.toByte(), 0x02.toByte(),  //   INPUT (Data,Var,Abs)
        0x95.toByte(), 0x01.toByte(),  //   REPORT_COUNT (1)
        0x75.toByte(), 0x08.toByte(),  //   REPORT_SIZE (8)
        0x81.toByte(), 0x03.toByte(),  //   INPUT (Cnst,Var,Abs)
        0x95.toByte(), 0x05.toByte(),  //   REPORT_COUNT (5)
        0x75.toByte(), 0x01.toByte(),  //   REPORT_SIZE (1)
        0x05.toByte(), 0x08.toByte(),  //   USAGE_PAGE (LEDs)
        0x19.toByte(), 0x01.toByte(),  //   USAGE_MINIMUM (Num Lock)
        0x29.toByte(), 0x05.toByte(),  //   USAGE_MAXIMUM (Kana)
        0x91.toByte(), 0x02.toByte(),  //   OUTPUT (Data,Var,Abs)
        0x95.toByte(), 0x01.toByte(),  //   REPORT_COUNT (1)
        0x75.toByte(), 0x03.toByte(),  //   REPORT_SIZE (3)
        0x91.toByte(), 0x03.toByte(),  //   OUTPUT (Cnst,Var,Abs)
        0x95.toByte(), 0x06.toByte(),  //   REPORT_COUNT (6)
        0x75.toByte(), 0x08.toByte(),  //   REPORT_SIZE (8)
        0x15.toByte(), 0x00.toByte(),  //   LOGICAL_MINIMUM (0)
        0x25.toByte(), 0x65.toByte(),  //   LOGICAL_MAXIMUM (101)
        0x05.toByte(), 0x07.toByte(),  //   USAGE_PAGE (Keyboard)
        0x19.toByte(), 0x00.toByte(),  //   USAGE_MINIMUM (Reserved (no event indicated))
        0x29.toByte(), 0x65.toByte(),  //   USAGE_MAXIMUM (Keyboard Application)
        0x81.toByte(), 0x00.toByte(),  //   INPUT (Data,Ary,Abs)
        0xc0.toByte(),  // END_COLLECTION
        0xc0.toByte() // END_COLLECTION
    )

    fun destruct() {
        deinitializeBluetoothHidDevice()
    }

    fun checkBluetoothStatus(): Boolean {
        return btAdapter?.isEnabled ?: false
    }

    fun initializeBluetoothHidDevice() {
        val btHidDeviceSqp = BluetoothHidDeviceAppSdpSettings(
            "Authorizer Bluetooth Keyboard",
            "Authorizer - Android Password Manager",
            "tjado.net",
            BluetoothHidDevice.SUBCLASS1_COMBO,
            hidDescriptor
        )
        val serviceListener: ServiceListener = object : ServiceListener {
            override fun onServiceConnected(profile: Int, btHidDeviceProxy: BluetoothProfile) {
                if (profile == BluetoothProfile.HID_DEVICE) {
                    btHidDevice = btHidDeviceProxy as BluetoothHidDevice
                    btHidDevice!!.registerApp(btHidDeviceSqp, null, null, { obj: Runnable -> obj.run() }, callback)
                }
            }

            override fun onServiceDisconnected(profile: Int) {
                if (profile == BluetoothProfile.HID_DEVICE) {
                }
            }
        }
        btAdapter!!.getProfileProxy(context, serviceListener, BluetoothProfile.HID_DEVICE)
    }

    fun deinitializeBluetoothHidDevice() {
        if (btHidDevice != null) {
            btHidDevice!!.unregisterApp()
            btAdapter!!.closeProfileProxy(BluetoothProfile.HID_DEVICE, btHidDevice)
        }
    }

    private val callback: BluetoothHidDevice.Callback = object : BluetoothHidDevice.Callback() {
        override fun onConnectionStateChanged(device: BluetoothDevice, state: Int) {
            if (device == btDevice) {
                when (state) {
                    BluetoothProfile.STATE_CONNECTED -> {

                        // delay required otherwise the device is not ready yet to receive the data
                        SystemClock.sleep(300)

                        // connection ready ... send data to device
                        send()

                        // disconnect and free up the HidDevice
                        deinitializeBluetoothHidDevice()
                    }
                }
            }
        }
    }

    val bondedDevices: Set<BluetoothDevice>
        get() = if (btAdapter != null) {
            btAdapter.bondedDevices
        } else emptySet()

    fun connectDeviceAndSend(device: BluetoothDevice?, output: String?) {
        if (device != null) {
            btDevice = device
            btOutputString = output
            val state = btHidDevice!!.getConnectionState(device)
            if (state != BluetoothProfile.STATE_CONNECTING && state != BluetoothProfile.STATE_CONNECTED) {
                btHidDevice!!.connect(device)
            } else {
                send()
                deinitializeBluetoothHidDevice()
            }
        }
    }

    private fun send() {
        try {
            if (btOutputBytes != null) {
                val blockSize = 8
                val blockCount = btOutputBytes!!.size / blockSize
                var start = 0
                for (i in 0 until blockCount) {
                    val scancode = Arrays.copyOfRange(btOutputBytes, start, start + blockSize)
                    sendReport(scancode)
                    clean()
                    start += blockSize
                }
                btOutputBytes = null
            } else if (btOutputString != null) {
                sendText(btOutputString!!)
                btOutputString = null
            }
        } catch (e: IOException) {
            e.printStackTrace()
        }
    }

    private fun sendReport(scancode: ByteArray) {
        btHidDevice!!.sendReport(btDevice, HID_RID_KEYBOARD.toInt(), scancode)
    }

    @Throws(IOException::class) private fun clean() {
        // overwriting the last keystroke, otherwise it will be repeated until the next writing
        // and it would not be possible to repeat the keystroke
        val scancode_reset: ByteArray = kbdKeyInterpreter.getScancode(null)
        sendReport(scancode_reset)
    }

    @Throws(IOException::class) fun sendText(output: String): Int {
        var scancode: ByteArray
        var ret = 0
        for (i in 0 until output.length) {
            val textCharString = output[i].toString()
            try {
                scancode = kbdKeyInterpreter.getScancode(textCharString)
                sendReport(scancode)
                clean()
            } catch (e: NoSuchElementException) {
                ret = 1
            }
        }
        return ret
    }

    companion object {
        const val HID_RID_KEYBOARD: Byte = 0x01
    }

    init {
        kbdKeyInterpreter = UsbHidKbd_en_US()
        btAdapter = BluetoothAdapter.getDefaultAdapter()
        context = ctx
    }
}